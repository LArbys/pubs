#include "beamdata_microboone.fcl"

process_name: BeamMerger

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "beam_%07r_%05s_%#.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         { }
  FileCatalogMetadata: { applicationFamily: "art"
                         applicationVersion: "vxx_yy_zz"
                         fileType: "data"
                         group: "uboone"
                         runType: "physics"
                         service_type: "FileCatalogMetadata"
                        }
  FileCatalogMetadataMicroBooNE: { FCLName: "prodcosmics_uboone.fcl"
                                   FCLVersion: "vswizzle"
                                   ProjectName: "BeamMerger"
                                   ProjectStage: "beammerge"
                                   ProjectVersion: "vxx_yy_zz"
                                   service_type: "FileCatalogMetadataMicroBooNE"
            			 }
}

#Start each new event with an empty event.
source:
{
  fileNames:                LARSOFT_INPUT
  module_type:		    RootInput
  maxEvents:                -1       # Number of events to create
}	

outputs:
{
 out1:
  {
   module_type: RootOutput
   fileName:    LARSOFT_OUTPUT #default file name, can override from command line with -o or --output
   compressionLevel: 1			    
   dataTier: "raw"
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
  beamdata: @local::microboone_beamdata
 }
 mergebeam: [ beamdata ]
 stream1:   [ out1 ] #could have multiple paths
 trigger_paths: [ mergebeam ]
 end_paths: [ stream1 ]  #end_path are things that do not modify art::Event, includes analyzers and output modules. all items here can be run simultaneously
}

physics.producers.beamdata.bnb.path_to_beam_file: "BEAM_PATH"
