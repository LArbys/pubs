## @namespace dstream.$PROJECT_NAME
#  @ingroup dstream
#  @brief Defines a project $Project_Name
#  @author $SHELL_USER_NAME

# python include
import time
# pub_dbi package include
from pub_dbi import DBException
# dstream class include
from dstream import DSException
from dstream import ds_project_base
from dstream import ds_status

## @class $Project_Name
#  @brief $SHELL_USER_NAME should give a brief comment here
#  @details
#  $SHELL_USER_NAME should give a detailed comment here
class $Project_Name(ds_project_base):

    # Define project name as class attribute
    _project = '$Project_Name'

    # Define # of runs to process per request
    _nruns   = 5

    ## @brief default ctor can take # runs to process for this instance
    def __init__(self,nruns=None):

        # Call base class ctor
        super($Project_Name,self).__init__()

        if nruns:

            self._nruns   = int(nruns)
        
    ## @brief access DB and retrieves new runs
    def process_newruns(self):

        # Attempt to connect DB. If failure, abort
        if not self.connect():
	    self.error('Cannot connect to DB! Aborting...')
	    return

        # Fetch runs from DB and process for # runs specified for this instance.
        ctr = self._nruns
        for x in self.get_runs(self._project,1):

            # Counter decreases by 1
            ctr -=1

            # Report starting
            self.info('processing new run: run=%d, subrun=%d ...' % (int(x[0]),int(x[1])))

            # Pretend I'm doing something
            time.sleep(0.5)

            # Report finishing
            self.info('finished processing run: run=%d, subrun=%d ...' % (int(x[0]),int(x[1])))

            # Create a status object to be logged to DB (if necessary)
            # Let's say we set the status to be 10
            status = ds_status( project = self._project,
                                run     = int(x[0]),
                                subrun  = int(x[1]),
                                seq     = int(x[2]),
                                status  = 10 )
            
            # Log status
            self.log_status( status )

            # Break from loop if counter became 0
            if not ctr: break

# A unit test section
if __name__ == '__main__':

    test_obj = $Project_Name(5)

    test_obj.process_newruns()



